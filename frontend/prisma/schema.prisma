generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id           Decimal      @db.Decimal
  address_type String
  created_at   DateTime     @default(now()) @db.Timestamptz(6)
  house_num    String?
  house_moo    String?
  soi          String?
  street       String?
  subdistrict  String?
  district     String?
  province     String?
  postal_code  Int?
  address_id   String       @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Address_Desc Address_Desc @relation(fields: [address_type], references: [type])
  Student      Student      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([id, address_type])
}

model Address_Desc {
  type    String    @id
  desc    String
  Address Address[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model District {
  id          BigInt  @id @default(autoincrement())
  code        String  @db.VarChar
  name_th     String? @db.VarChar
  name_en     String? @db.VarChar
  province_id BigInt?
}

model Geography {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Military_info {
  id                  Decimal   @id @db.Decimal
  military_id         Decimal?  @db.Decimal
  military_class      Decimal?  @db.Decimal
  register_type       Int?      @db.SmallInt
  grade9_gpax         Decimal?  @db.Decimal
  grade9_school       String?
  prev_military_class String?
  prev_school         String?
  academic_grade1     String?
  academic_class1     String?
  academic_major1     String?
  academic_school1    String?
  academic_grade2     String?
  academic_class2     String?
  academic_major2     String?
  academic_school2    String?
  academic_grade3     String?
  academic_class3     String?
  academic_major3     String?
  academic_school3    String?
  academic_grade4     String?
  academic_class4     String?
  academic_major4     String?
  academic_school4    String?
  military_grade1     Int?
  military_year1      Int?
  military_school1    String?
  military_province   String?
  military_grade2     Int?
  military_year2      Int?
  military_school2    String?
  military_province2  String?
  military_grade3     Int?
  military_year3      Int?
  military_school3    String?
  military_province3  String?
  military_grade4     Int?
  military_year4      Int?
  military_school4    String?
  military_province4  String?
  reg_army            String?
  reg_corp            String?
  promo_title1        String?
  promo_corp1         String?
  promo_order1        String?
  promo_date1         DateTime? @db.Date
  promo_title2        String?
  promo_corp2         String?
  promo_order2        String?
  promo_date2         DateTime? @db.Date
  Student             Student   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Province {
  id           Int    @id @default(autoincrement())
  code         String @db.VarChar(2)
  name_th      String @db.VarChar(150)
  name_en      String @db.VarChar(150)
  geography_id Int    @default(0)
}

model Student {
  id                 Decimal              @id(map: "User_pkey") @unique(map: "User_id_key") @db.Decimal
  lnameTH            String
  fnameTH            String
  lnameEN            String
  fnameEN            String
  fac_id             String
  facultyNameTH      String
  dept               String
  year               String
  bd                 DateTime             @db.Date
  tel_num            String?
  title              String?
  major              String?              @default("")
  nationality        String?
  race               String?
  religion           String?              @db.VarChar
  thai_id            String?
  facultyNameEN      String?
  Address            Address[]
  Military_info      Military_info?
  UHC_reg_info       UHC_reg_info?
  accident_info      accident_info[]
  father_mother_info father_mother_info[]
  parent_info        parent_info?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subdistrict {
  id        String  @id @db.VarChar
  zipCode   BigInt
  nameTh    String? @db.VarChar
  nameEn    String? @db.VarChar
  amphureId BigInt?
}

model UHC_reg_info {
  id                    Decimal   @id @db.Decimal
  last_update           DateTime  @default(now()) @db.Timestamptz(6)
  smart_card_issured    DateTime? @db.Date
  smart_card_expired    DateTime? @db.Date
  status_before_reg     String?
  status_info           String?
  frequence_uses        String?
  is_been               Boolean?
  is_congenital_disease Boolean?
  Student               Student   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model accident_claim_info {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  acc_desc        String
  acc_date        DateTime @db.Timestamp(6)
  acc_place       DateTime @db.Time(6)
  email           String
  treatment_place String
  hospital_type   String
  stu_bank_acc    Decimal  @db.Decimal
  stu_bank_name   String
  med_fee         Decimal  @db.Decimal
}

model accident_info {
  id              BigInt    @id @default(autoincrement())
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  stu_id          Decimal?  @db.Decimal
  acc_desc        String?
  acc_date        DateTime? @db.Date
  accident_place  String?
  treatment_place String?
  hospital_type   String?
  medical_fee     Int?
  Student         Student?  @relation(fields: [stu_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model father_mother_info {
  id            Decimal  @db.Decimal
  relation      String
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  title         String?
  fname         String?
  lname         String?
  working_place String?
  phone_num     String?
  tel_num       String?
  occupation    String?
  Student       Student  @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([id, relation])
}

model parent_info {
  parent_fname    String?
  parent_lname    String?
  occupation      String?
  age             Int?
  parent_relation String?
  id              Decimal @id @db.Decimal
  title           String?
  parent_address  String?
  Student         Student @relation(fields: [id], references: [id], onDelete: Cascade)
}
<<<<<<< HEAD
=======

model promoted_record {
  id         Decimal   @id @db.Decimal
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  rank       String?
  corp       String?
  order_num  String?
  ordered_at DateTime? @db.Date
  Student    Student   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model reserve_info {
  id      Decimal @id @db.Decimal
  army    String?
  corp    String?
  Student Student @relation(fields: [id], references: [id], onDelete: Cascade)
}

model training_record {
  id         Decimal  @db.Decimal
  created_at DateTime @default(now()) @db.Timestamptz(6)
  class      Int
  year       Int
  major      String?
  school     String
  Student    Student  @relation(fields: [id], references: [id], onDelete: Cascade)

  @@id([id, year])
}
>>>>>>> refs/remotes/origin/main
